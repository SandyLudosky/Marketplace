{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red202\green202\blue202;\red52\green52\blue52;\red183\green111\blue179;
\red70\green137\blue204;\red212\green214\blue154;\red140\green211\blue254;\red67\green192\blue160;\red66\green179\blue255;
\red89\green138\blue67;\red194\green126\blue101;}
{\*\expandedcolortbl;;\cssrgb\c83137\c83137\c83137;\csgray\c26515;\cssrgb\c77255\c52549\c75294;
\cssrgb\c33725\c61176\c83922;\cssrgb\c86275\c86275\c66667;\cssrgb\c61176\c86275\c99608;\cssrgb\c30588\c78824\c69020;\cssrgb\c30980\c75686\c100000;
\cssrgb\c41569\c60000\c33333;\cssrgb\c80784\c56863\c47059;}
\margl1440\margr1440\vieww16800\viewh9860\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 export\cf2  \cf5 async\cf2  \cf5 function\cf2  \cf6 handleUserRegistration\cf2 (\cf7 dispatch\cf2 , \cf7 user\cf2 ) \{ \
    \cf4 return\cf2  \cf5 new\cf2  \cf8 Promise\cf2 (\cf6 resolve\cf2  \cf5 =>\cf2  \{ \
        \cf9 app\cf2 .\cf9 emailPasswordAuth\cf2 \
            .\cf6 registerUser\cf2 (\cf7 user\cf2 .\cf7 email\cf2 , \cf7 user\cf2 .\cf7 password\cf2 )\
            .\cf6 then\cf2 (\cf5 async\cf2  () \cf5 =>\cf2  \{ \
                \cf9 app\cf2 .\cf6 logIn\cf2 (\cf7 Realm\cf2 .\cf8 Credentials\cf2 .\cf6 emailPassword\cf2 (\cf7 user\cf2 .\cf7 email\cf2 , \cf7 user\cf2 .\cf7 password\cf2 ))\
                    .\cf6 then\cf2 (() \cf5 =>\cf2  \{ \
                        \cf6 addUser\cf2 (\cf7 user\cf2 )\
                        \cf6 dispatch\cf2 (\cf6 handleLogin\cf2 (\cf7 user\cf2 ))\
                        \cf6 resolve\cf2 (\cf7 user\cf2 )  \
                    \})\
            \})\
            .\cf6 catch\cf2 (\cf7 err\cf2  \cf5 =>\cf2  \cf6 dispatch\cf2 (\cf6 handleAuthenticationErrors\cf2 (\cf7 err\cf2 )))\
    \})\
    \
\}\
\pard\pardeftab720\sl480\partightenfactor0
\cf5 async\cf2  \cf5 function\cf2  \cf6 handleUserLogin\cf2 (\cf7 dispatch\cf2 , \cf7 email\cf2 , \cf7 password\cf2 ) \{\
    \cf4 return\cf2  \cf5 new\cf2  \cf8 Promise\cf2 ((\cf6 resolve\cf2 ) \cf5 =>\cf2  \{\
      \cf9 app\cf2 \
        .\cf6 logIn\cf2 (\cf7 Realm\cf2 .\cf8 Credentials\cf2 .\cf6 emailPassword\cf2 (\cf7 email\cf2 , \cf7 password\cf2 ))\
        .\cf6 then\cf2 (\cf5 async\cf2  () \cf5 =>\cf2  \{\
          \cf10 // verify current user\cf2 \
          \cf5 const\cf2  \cf9 currentUser\cf2  = \cf4 await\cf2  \cf9 app\cf2 .\cf7 currentUser\cf2 ;\
          \cf10 // retrieve user profile\cf2 \
          \cf10 // getUser(currentUser)\cf2 \
          \cf10 //     .then(userProfile => \{\cf2 \
          \cf10 //         dispatch(handleLogin(userProfile))\cf2 \
          \cf10 //             resolve(currentUser)\cf2 \
          \cf10 //     \})\cf2 \
        \})\
        .\cf6 catch\cf2 ((\cf7 err\cf2 ) \cf5 =>\cf2  \cf6 dispatch\cf2 (\cf6 handleAuthenticationErrors\cf2 (\cf7 err\cf2 )));\
    \});\
  \}\
  \cf5 async\cf2  \cf5 function\cf2  \cf6 handleUserLogout\cf2 () \{\
    \cf7 console\cf2 .\cf6 dir\cf2 (\cf9 app\cf2 .\cf7 currentUser\cf2 );\
    \cf9 app\cf2 .\cf7 currentUser\cf2 \
      ?.\cf6 logOut\cf2 ()\
      .\cf6 then\cf2 (() \cf5 =>\cf2  \{\
        \cf7 console\cf2 .\cf6 log\cf2 (\cf11 "user successfully log out"\cf2 );\
      \})\
      .\cf6 catch\cf2 ((\cf7 err\cf2 ) \cf5 =>\cf2  \cf7 console\cf2 .\cf6 log\cf2 (\cf7 err\cf2 ));\
  \}\
  \cf5 async\cf2  \cf5 function\cf2  \cf6 handleAuthentication\cf2 () \{\
    \cf5 const\cf2  \cf9 currentUser\cf2  = \cf4 await\cf2  \cf9 app\cf2 .\cf7 currentUser\cf2 ;\
    \cf10 // getUser(currentUser?.email)\cf2 \
    \cf10 //     .then(userProfile => !!currentUser && dispatch(handleLogin(userProfile)))\cf2 \
    \cf10 //     .catch(err =>  dispatch(handleAuthenticationError(err)))\cf2 \
  \}\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \
}